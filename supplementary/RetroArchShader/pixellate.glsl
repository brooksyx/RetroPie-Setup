// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)


struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};

vec4 _oPosition1;
uniform mat4 MVPMatrix;
vec4 _r0002;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;
varying vec4 TEX0;

 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i != 4; i++)
               for (int j = 0; j != 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);

    vec2 _oTex;

    _r0002.x = dot(MVPMatrix_[0], VertexCoord);
    _r0002.y = dot(MVPMatrix_[1], VertexCoord);
    _r0002.z = dot(MVPMatrix_[2], VertexCoord);
    _r0002.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0002;
    _oTex = TexCoord.xy;
    gl_Position = _r0002;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif


struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};

vec4 _ret_0;
vec2 _TMP9;
vec4 _TMP7;
vec2 _TMP6;
vec4 _TMP5;
vec2 _TMP4;
vec4 _TMP3;
vec2 _TMP2;
vec4 _TMP1;
vec2 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0014;
vec2 _c0016;
vec2 _x0018;
vec2 _c0020;
vec2 _x0022;
vec2 _c0024;
vec2 _x0026;
vec2 _c0028;
vec2 _TMP29;
vec2 _a0030;
vec2 _x0032;
vec2 _TMP33;
vec2 _b0034;
vec2 _x0034;
vec2 _a0034;
varying vec4 TEX0;

 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{

    vec2 _texelSize;
    vec2 _range;
    float _left;
    float _top;
    float _right;
    float _bottom;
    float _totalArea;
    vec3 _averageColor;

    _texelSize = 1.00000000E+000/TextureSize;
    _range = 5.00000000E-001/OutputSize;
    _left = TEX0.x - _range.x;
    _top = TEX0.y + _range.y;
    _right = TEX0.x + _range.x;
    _bottom = TEX0.y - _range.y;
    _x0014 = vec2(_left, _top)/_texelSize;
    _TMP0 = floor(_x0014);
    _c0016 = (_TMP0 + 5.00000000E-001)*_texelSize;
    _TMP1 = texture2D(Texture, _c0016);
    _x0018 = vec2(_right, _bottom)/_texelSize;
    _TMP2 = floor(_x0018);
    _c0020 = (_TMP2 + 5.00000000E-001)*_texelSize;
    _TMP3 = texture2D(Texture, _c0020);
    _x0022 = vec2(_left, _bottom)/_texelSize;
    _TMP4 = floor(_x0022);
    _c0024 = (_TMP4 + 5.00000000E-001)*_texelSize;
    _TMP5 = texture2D(Texture, _c0024);
    _x0026 = vec2(_right, _top)/_texelSize;
    _TMP6 = floor(_x0026);
    _c0028 = (_TMP6 + 5.00000000E-001)*_texelSize;
    _TMP7 = texture2D(Texture, _c0028);
    _a0030 = TEX0.xy/_texelSize;
    _x0032 = _a0030 + 5.00000000E-001;
    _TMP29 = floor(_x0032);
    _x0034 = _TMP29*_texelSize;
    _a0034 = vec2(_left, _bottom);
    _b0034 = vec2(_right, _top);
    _TMP9 = min(_b0034, _x0034);
    _TMP33 = max(_a0034, _TMP9);
    _totalArea = 4.00000000E+000*_range.x*_range.y;
    _averageColor = (((_TMP33.x - _left)*(_top - _TMP33.y))/_totalArea)*_TMP1.xyz;
    _averageColor = _averageColor + (((_right - _TMP33.x)*(_TMP33.y - _bottom))/_totalArea)*_TMP3.xyz;
    _averageColor = _averageColor + (((_TMP33.x - _left)*(_TMP33.y - _bottom))/_totalArea)*_TMP5.xyz;
    _averageColor = _averageColor + (((_right - _TMP33.x)*(_top - _TMP33.y))/_totalArea)*_TMP7.xyz;
    _ret_0 = vec4(_averageColor.x, _averageColor.y, _averageColor.z, 1.00000000E+000);
    gl_FragColor = _ret_0;
    return;
} 
#endif
